call pathogen#infect()

let mapleader=","

set hidden     " hide buffers on opening new instead of warn
set number     " show line numbers

set autoindent " always indent automagically
set copyindent " copy indentation
set shiftwidth=4 " number of spaces for autoindent
set shiftround " use multiple of shiftwidth when indenting

set nowrap " do not wrap lines
set tabstop=4 " tab is 4 spaces
set backspace=indent,eol,start " backspace button options

set nocompatible
set laststatus=2

" GUI
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar

set directory=. " directory for swap files

set wildmenu
set wildmode=longest,list
set showcmd

set modeline
set modelines=5

""""""""""""""""
" Key mappings "
""""""""""""""""

" tab navigation
map <S-h> gT
map <S-l> gt

" windows and buffers navigation
map <C-h> :bprev<CR> 
map <C-l> :bnext<CR>

" no more arrows ;)
inoremap  <Up>     <NOP>
inoremap  <Down>   <NOP>
inoremap  <Left>   <NOP>
inoremap  <Right>  <NOP>
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

" ESC to jj
imap jj <Esc>

" edit/reload .vimrc
nmap <silent> <leader>ev :e /home/houen/.vimrc<RETURN>
nmap <silent> <leader>rv :so /home/houen/.vimrc<RETURN>

nmap <silent> <leader>ea :e /home/houen/.config/awesome/rc.lua<RETURN>
"""""""""""
" PLUGINS "
"""""""""""

" Powerline
"""""""""""
set rtp+=/home/houen/dotfiles/powerline/bindings/vim
let g:Powerline_symbols = 'unicode'
let g:Powerline_symbols = 'fancy'

" NERD Tree
"""""""""""
nmap <silent> <c-n> :NERDTreeToggle<CR>

" Tagbar 
""""""""
nmap <silent> <F8> :TagbarToggle<CR>

" Tasklist
""""""""""
let g:tlTokenList = ['CITE', 'TODO', 'PROF','FIXME','ADD']
nmap <silent> <F7> :TaskList<CR>

" CtrlP
"""""""
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_working_path_mode = 'ra'


" TODO: lalall
" Set paste psuje IMAPS w latex
" set paste
"set runtimepath=~/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,~/.vim/after

set tags=./tags;/


filetype plugin on
set grepprg=grep\ -nH\ $*
filetype indent on

"set ofu=syntaxcomplete#Complete
"autocmd FileType python set omnifunc=pythoncomplete#Complete

if has('gui_running')
  let g:solarized_termcolors=256
  set gfn=Droid\ Sans\ Mono\ for\ Powerline\ 13
  set background=dark
  colorscheme wombat256
  "colorscheme camo_personalized
else
  set t_Co=256
  colorscheme wombat256
endif

" colorscheme wombatterm
" ustawienie foldingu wierszy
" taby i linie
set autoindent
set smartindent
set expandtab
set tabstop=2
set shiftwidth=2
set textwidth=160

set ignorecase 
set smartcase
set incsearch
set ai
set si

" włączenie (zp) i wyłączenie (zP) korekty pisowni dla j.polskiego
map zp :setlocal spell spelllang=pl<CR>
map ze :setlocal spell spelllang=en<CR>
map zus :setlocal spell spelllang=en_us<CR>
map zn :setlocal nospell<CR>

if $TERM =~ '^screen-256color'
    map <Esc>OH <Home>
    map! <Esc>OH <Home>
    map <Esc>OF <End>
    map! <Esc>OF <End>
endif

" JSON
"au BufRead,BufNewFile *.json set filetype=json
"augroup json_autocmd
"  autocmd!
"  autocmd FileType json set autoindent
"  autocmd FileType json set formatoptions=tcq2l
"  autocmd FileType json set textwidth=78 shiftwidth=2
"  autocmd FileType json set softtabstop=2 tabstop=8
"  autocmd FileType json set expandtab
"  autocmd FileType json set foldmethod=syntax
"augroup END 

syntax on
set noeb vb t_vb=
au GUIEnter * set vb t_vb=
set clipboard=unnamedplus
hi FoldColumn guifg=red guibg=black
set foldmethod=syntax
au BufRead * normal zR

" OmniSharp won't work without this setting
filetype plugin on

"This is the default value, setting it isn't actually necessary
let g:OmniSharp_host = "http://localhost:2000"

"Set the type lookup function to use the preview window instead of the status line
"let g:OmniSharp_typeLookupInPreview = 1

"Showmatch significantly slows down omnicomplete
"when the first match contains parentheses.
set noshowmatch
"Set autocomplete function to OmniSharp (if not using YouCompleteMe completion plugin)
autocmd FileType cs setlocal omnifunc=OmniSharp#Complete

"Super tab settings
"let g:SuperTabDefaultCompletionType = 'context'
"let g:SuperTabContextDefaultCompletionType = "<c-x><c-o>"
"let g:SuperTabDefaultCompletionTypeDiscovery = ["&omnifunc:<c-x><c-o>","&completefunc:<c-x><c-n>"]
"let g:SuperTabClosePreviewOnPopupClose = 1

"don't autoselect first item in omnicomplete, show if only one item (for preview)
"remove preview if you don't want to see any documentation whatsoever.
set completeopt=longest,menuone,preview
" Fetch full documentation during omnicomplete requests. 
" There is a performance penalty with this (especially on Mono)
" By default, only Type/Method signatures are fetched. Full documentation can still be fetched when
" you need it with the :OmniSharpDocumentation command.
" let g:omnicomplete_fetch_documentation=1

"Move the preview window (code documentation) to the bottom of the screen, so it doesn't move the code!
"You might also want to look at the echodoc plugin
set splitbelow

nnoremap <F5> :wa!<cr>:OmniSharpBuild<cr>
" Builds can run asynchronously with vim-dispatch installed
"nnoremap <F5> :wa!<cr>:OmniSharpBuildAsync<cr>

"The following commands are contextual, based on the current cursor position.

let g:C_Ctrl_j = 'off'

nmap <C-k> <C-b> ; scroll page up
nmap <C-j> <C-f> ; scroll page down

nnoremap <F12> :OmniSharpGotoDefinition<cr>
nnoremap gd :OmniSharpGotoDefinition<cr>
nnoremap <leader>fi :OmniSharpFindImplementations<cr>
nnoremap <leader>ft :OmniSharpFindType<cr>
nnoremap <leader>fs :OmniSharpFindSymbol<cr>
nnoremap <leader>fu :OmniSharpFindUsages<cr>
nnoremap <leader>fm :OmniSharpFindMembersInBuffer<cr>
nnoremap <leader>tt :OmniSharpTypeLookup<cr>
nnoremap <leader>dc :OmniSharpDocumentation<cr>
"show type information automatically when the cursor stops moving
autocmd CursorHold *.cs call OmniSharp#TypeLookupWithoutDocumentation()
set updatetime=500
set cmdheight=2
"I find contextual code actions so useful that I have it mapped to the spacebar
nnoremap <space> :OmniSharpGetCodeActions<cr>

" rename with dialog
nnoremap <leader>nm :OmniSharpRename<cr>
nnoremap <F2> :OmniSharpRename<cr>      
" rename without dialog - with cursor on the symbol to rename... ':Rename newname'
command! -nargs=1 Rename :call OmniSharp#RenameTo("<args>")

" Force OmniSharp to reload the solution. Useful when switching branches etc.
nnoremap <leader>rl :OmniSharpReloadSolution<cr>
nnoremap <leader>cf :OmniSharpCodeFormat<cr>
" Load the current .cs file to the nearest project
nnoremap <leader>tp :OmniSharpAddToProject<cr>
" Automatically add new cs files to the nearest project on save
autocmd BufWritePost *.cs call OmniSharp#AddToProject()
" (Experimental - uses vim-dispatch or vimproc plugin) - Start the omnisharp server for the current solution
nnoremap <leader>ss :OmniSharpStartServer<cr>
nnoremap <leader>sp :OmniSharpStopServer<cr>

" Add syntax highlighting for types and interfaces
nnoremap <leader>th :OmniSharpHighlightTypes<cr>
"Don't ask to save when changing buffers (i.e. when jumping to a type definition)
set hidden
